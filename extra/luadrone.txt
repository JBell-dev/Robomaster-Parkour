-- Include required module
local simROS2 = require('simROS2')
print("simROS2 plugin loaded: " .. tostring(simROS2))

-- Initialize variables
local particlesAreVisible = true
local simulateParticles = true
local fakeShadow = true
local particleCountPerSecond = 430
local particleSize = 0.005
local particleDensity = 8500
local particleScatteringAngle = 30
local particleLifeTime = 0.5
local maxParticleCount = 50

-- ROS 2 publisher and subscriber handles
local thrustPublisher = nil
local alphaPublisher = nil
local betaPublisher = nil
local rotationPublisher = nil

-- Variables to store the received commands
local thrustCommand = 0.0
local alphaCommand = 0.0
local betaCommand = 0.0
local rotationCommand = 0.0

-- Callback function for receiving thrust commands
local function thrustCallback(msg)
    sim.addLog(sim.verbosity_scriptinfos, "Entering thrustCallback function")
    
    if msg then
        sim.addLog(sim.verbosity_scriptinfos, "Received thrust command: " .. tostring(msg.data))
        sim.addLog(sim.verbosity_scriptinfos, "Message contents: " .. tostring(msg))
        thrustCommand = msg.data
        sim.addLog(sim.verbosity_scriptinfos, "thrustCommand value: " .. tostring(thrustCommand))
    else
        sim.addLog(sim.verbosity_scripterrors, "Received nil message in thrustCallback")
    end
    
    sim.addLog(sim.verbosity_scriptinfos, "Exiting thrustCallback function")
end


-- Callback function for receiving alpha correction commands
local function alphaCallback(msg)
    -- Extract alpha correction value from the message and store it
    alphaCommand = msg.data
end

-- Callback function for receiving beta correction commands
local function betaCallback(msg)
    -- Extract beta correction value from the message and store it
    betaCommand = msg.data
end

-- Callback function for receiving rotation correction commands
local function rotationCallback(msg)
    -- Extract rotation correction value from the message and store it
    rotationCommand = msg.data
end

function sysCall_init() 
    particlesAreVisible=true
    simulateParticles=true
    fakeShadow=true
    
    particleCountPerSecond=430
    particleSize=0.005
    particleDensity=8500
    particleScatteringAngle=30
    particleLifeTime=0.5
    maxParticleCount=50

    -- Detatch the manipulation sphere:
    targetObj=sim.getObject('./target')
    sim.setObjectParent(targetObj,-1,true)

    -- This control algo was quickly written and is dirty and not optimal. It just serves as a SIMPLE example
    d=sim.getObject('./base')

    propellerHandles={}
    jointHandles={}
    particleObjects={-1,-1,-1,-1}
    local ttype=sim.particle_roughspheres+sim.particle_cyclic+sim.particle_respondable1to4+sim.particle_respondable5to8+sim.particle_ignoresgravity
    if not particlesAreVisible then
        ttype=ttype+sim.particle_invisible
    end
    for i=1,4,1 do
        propellerHandles[i]=sim.getObject('./propeller['..(i-1)..']/respondable')
        jointHandles[i]=sim.getObject('./propeller['..(i-1)..']/joint')
        if simulateParticles then
            particleObjects[i]=sim.addParticleObject(ttype,particleSize,particleDensity,{2,1,0.2,3,0.4},particleLifeTime,maxParticleCount,{0.3,0.7,1})
        end
    end
    heli=sim.getObject('.')

    pParam=2
    iParam=0
    dParam=0
    vParam=-2

    cumul=0
    lastE=0
    pAlphaE=0
    pBetaE=0
    psp2=0
    psp1=0

    prevEuler=0


    if (fakeShadow) then
        shadowCont=sim.addDrawingObject(sim.drawing_discpts+sim.drawing_cyclic+sim.drawing_25percenttransparency+sim.drawing_50percenttransparency+sim.drawing_itemsizes,0.2,0,-1,1)
    end
    
-- Create ROS 2 publishers and subscribers
    thrustPublisher = simROS2.createPublisher('/quadcopter/thrust', 'std_msgs/msg/Float32')
    alphaPublisher = simROS2.createPublisher('/quadcopter/alpha', 'std_msgs/msg/Float32')
    betaPublisher = simROS2.createPublisher('/quadcopter/beta', 'std_msgs/msg/Float32')
    rotationPublisher = simROS2.createPublisher('/quadcopter/rotation', 'std_msgs/msg/Float32')

    thrustSubscriber = simROS2.createSubscription('/quadcopter/thrust_cmd', 'std_msgs/msg/Float32', thrustCallback)
    alphaSubscriber = simROS2.createSubscription('/quadcopter/alpha_cmd', 'std_msgs/msg/Float32', alphaCallback)
    betaSubscriber = simROS2.createSubscription('/quadcopter/beta_cmd', 'std_msgs/msg/Float32', betaCallback)
    rotationSubscriber = simROS2.createSubscription('/quadcopter/rotation_cmd', 'std_msgs/msg/Float32', rotationCallback)
end

function sysCall_cleanup() 
    sim.removeDrawingObject(shadowCont)
    for i=1,#particleObjects,1 do
        sim.removeParticleObject(particleObjects[i])
    end
    
        -- Shutdown ROS 2 publishers and subscribers
    if thrustPublisher then simROS2.shutdownPublisher(thrustPublisher) end
    if alphaPublisher then simROS2.shutdownPublisher(alphaPublisher) end
    if betaPublisher then simROS2.shutdownPublisher(betaPublisher) end
    if rotationPublisher then simROS2.shutdownPublisher(rotationPublisher) end

    if thrustSubscriber then simROS2.shutdownSubscription(thrustSubscriber) end
    if alphaSubscriber then simROS2.shutdownSubscription(alphaSubscriber) end
    if betaSubscriber then simROS2.shutdownSubscription(betaSubscriber) end
    if rotationSubscriber then simROS2.shutdownSubscription(rotationSubscriber) end
end 

function sysCall_actuation() 
    local pos = sim.getObjectPosition(d, sim.handle_world)
    if (fakeShadow) then
        local itemData = {pos[1], pos[2], 0.002, 0, 0, 0, 1, 0.2}
        sim.addDrawingObjectItem(shadowCont, itemData)
    end

    -- Vertical control
    local targetPos = sim.getObjectPosition(targetObj, sim.handle_world)
    local pos = sim.getObjectPosition(d, sim.handle_world)
    local l = sim.getVelocity(heli)
    local e = (targetPos[3] - pos[3])
    cumul = cumul + e
    local pv = pParam * e
    local thrust = 5.45 + pv + iParam * cumul + dParam * (e - lastE) + l[3] * vParam
    lastE = e

    -- Horizontal control
    local sp = sim.getObjectPosition(targetObj, d)
    local m = sim.getObjectMatrix(d, sim.handle_world)
    local vx = {1, 0, 0}
    vx = sim.multiplyVector(m, vx)
    local vy = {0, 1, 0}
    vy = sim.multiplyVector(m, vy)
    local alphaE = (vy[3] - m[12])
    local alphaCorr = 0.25 * alphaE + 2.1 * (alphaE - pAlphaE)
    local betaE = (vx[3] - m[12])
    local betaCorr = -0.25 * betaE - 2.1 * (betaE - pBetaE)
    pAlphaE = alphaE
    pBetaE = betaE
    alphaCorr = alphaCorr + sp[2] * 0.005 + 1 * (sp[2] - psp2)
    betaCorr = betaCorr - sp[1] * 0.005 - 1 * (sp[1] - psp1)
    psp2 = sp[2]
    psp1 = sp[1]

    -- Rotational control
    local euler = sim.getObjectOrientation(d, targetObj)
    local rotCorr = euler[3] * 0.1 + 2 * (euler[3] - prevEuler)
    prevEuler = euler[3]

    -- Apply the received commands to the quadcopter
    thrust = thrust + thrustCommand
    alphaCorr = alphaCorr + alphaCommand
    betaCorr = betaCorr + betaCommand
    rotCorr = rotCorr + rotationCommand

    -- Decide the motor velocities
    handlePropeller(1, thrust * (1 - alphaCorr + betaCorr + rotCorr))
    handlePropeller(2, thrust * (1 - alphaCorr - betaCorr - rotCorr))
    handlePropeller(3, thrust * (1 + alphaCorr - betaCorr + rotCorr))
    handlePropeller(4, thrust * (1 + alphaCorr + betaCorr - rotCorr))

    -- Publish quadcopter state to ROS 2
    simROS2.publish(thrustPublisher, {data = thrust})
    simROS2.publish(alphaPublisher, {data = alphaCorr})
    simROS2.publish(betaPublisher, {data = betaCorr})
    simROS2.publish(rotationPublisher, {data = rotCorr})
end 


function handlePropeller(index,particleVelocity)
    propellerRespondable=propellerHandles[index]
    propellerJoint=jointHandles[index]
    propeller=sim.getObjectParent(propellerRespondable)
    particleObject=particleObjects[index]
    maxParticleDeviation=math.tan(particleScatteringAngle*0.5*math.pi/180)*particleVelocity
    notFullParticles=0

    local t=sim.getSimulationTime()
    sim.setJointPosition(propellerJoint,t*10)
    ts=sim.getSimulationTimeStep()
    
    m=sim.getObjectMatrix(propeller,sim.handle_world)
    particleCnt=0
    pos={0,0,0}
    dir={0,0,1}
    
    requiredParticleCnt=particleCountPerSecond*ts+notFullParticles
    notFullParticles=requiredParticleCnt % 1
    requiredParticleCnt=math.floor(requiredParticleCnt)
    while (particleCnt<requiredParticleCnt) do
        -- we want a uniform distribution:
        x=(math.random()-0.5)*2
        y=(math.random()-0.5)*2
        if (x*x+y*y<=1) then
            if (simulateParticles) then
                pos[1]=x*0.08
                pos[2]=y*0.08
                pos[3]=-particleSize*0.6
                dir[1]=pos[1]+(math.random()-0.5)*maxParticleDeviation*2
                dir[2]=pos[2]+(math.random()-0.5)*maxParticleDeviation*2
                dir[3]=pos[3]-particleVelocity*(1+0.2*(math.random()-0.5))
                pos=sim.multiplyVector(m,pos)
                dir=sim.multiplyVector(m,dir)
                itemData={pos[1],pos[2],pos[3],dir[1],dir[2],dir[3]}
                sim.addParticleObjectItem(particleObject,itemData)
            end
            particleCnt=particleCnt+1
        end
    end
    -- Apply a reactive force onto the body:
    totalExertedForce=particleCnt*particleDensity*particleVelocity*math.pi*particleSize*particleSize*particleSize/(6*ts)
    force={0,0,totalExertedForce}
    m[4]=0
    m[8]=0
    m[12]=0
    force=sim.multiplyVector(m,force)
    local rotDir=1-math.mod(index,2)*2
    torque={0,0,rotDir*0.002*particleVelocity}
    torque=sim.multiplyVector(m,torque)
    sim.addForceAndTorque(propellerRespondable,force,torque)
end